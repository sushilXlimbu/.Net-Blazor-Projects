@page "/bar"

@using ChartJs.Blazor.BarChart
@using ChartJs.Blazor.BarChart.Axes;
@using ChartJs.Blazor.Common.Axes;



@if (_barConfig != null)
{
    <div style="width: 600px">
        <Chart Config="_barConfig"></Chart>
    </div>
        
}
else
{
        <p>Loading...</p>
    // Show a loading message while the configuration is being initialized
}


@code {

    private BarConfig _barConfig = new BarConfig();

    protected override void OnInitialized()
    {
        ConfigureBarConfig();
    }

    private void ConfigureBarConfig()
    {
        _barConfig = new BarConfig
            {
                Options = new BarOptions
                {
                    Responsive = true,
                    Title = new OptionsTitle
                    {
                        Display = true,
                        Text = "Incomes"
                    },
                    Scales = new BarScales
                    {
                        YAxes = new List<CartesianAxis>
                        {
                            new BarLinearCartesianAxis
                            {
                                ScaleLabel = new ScaleLabel
                                {
                                    Display = true,
                                    LabelString = "Amount"
                                }
                            }
                        }
                    },
                    Legend = new Legend
                    {
                        Display = false
                    }
                }
            };
        string[] _datas = { "Residental Rental income", "Commercial Rental Income", "Vacation Rental Income", "Rental Income", "Assets Rental Income", "Assets Rental Income", "Assets Rental Income", "Assets Rental Income" };

        foreach (string room in _datas)
        {
            _barConfig.Data.Labels.Add(room);
        }

        int[] _values = { 40, 45, 35, 60, 70, 90,79,56,0};

        BarDataset<int> dataset = new BarDataset<int>(_values)
        {
            BackgroundColor = new[]
            {
                ColorUtil.ColorHexString(255,91,91),
                ColorUtil.ColorHexString(16,196,105),
                ColorUtil.ColorHexString(249,200,81),
                ColorUtil.ColorHexString(75,192,192),
                ColorUtil.ColorHexString(153,102,255),
                ColorUtil.ColorHexString(255,159,64),
                ColorUtil.ColorHexString(102, 140, 255),
                ColorUtil.ColorHexString(255, 153, 204),


            }
        };


        _barConfig.Data.Datasets.Add(dataset);

    }

}
